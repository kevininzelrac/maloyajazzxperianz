generator client {
  provider = "prisma-client-js"
  //output = "../generated/client" 
  // + npm add db@./generated/client
  // import {PrismaClient } from "db";
  // or
  //output   = "../node_modules/kevin/prisma/client"
  // import {PrismaClient } from "kevin/prisma/client/index.js";
}
datasource db {
  provider = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  fullName      String
  firstname     String
  lastname      String
  avatar        String
  Credential    Credential?
  RefreshToken  RefreshToken[]
  Post Post[]
  role          Role      @default(BASIC)
  @@index([email])
}

model Credential {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  passwordHash  String?
  userId        String    @db.Uuid
  user          User      @relation(fields: [userId], references: [id])
  @@unique([userId])
}

model RefreshToken {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId  String  @db.Uuid
  token   String
  revoked Boolean @default(false)
  user    User    @relation(fields: [userId], references: [id])
  @@unique([token])
}

model Post {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId  String    @db.Uuid
  title     String
  type      String    @default("")
  category  String    @default("empty")
  content   String
  status    Status    @default(DRAFT)
  audience  Audience  @default(PRIVATE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
}

enum Role {
  ADMIN
  EDITOR
  BASIC
  FOLLOWER
}

enum Status {
  DRAFT
  PUBLISHED
}

enum Audience {
  PUBLIC
  PRIVATE
}